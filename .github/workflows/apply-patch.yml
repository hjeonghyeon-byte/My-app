name: Apply Patch

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: 'Base branch to open PR against (e.g., main)'
        required: true
        default: main
      pr_title:
        description: 'PR title'
        required: false
        default: Auto patch from n8n
      patch_b64:
        description: 'Optional: Base64-encoded patch to apply'
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  apply-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base_branch }}
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create feature branch
        run: |
          BR="auto/patch-${{ github.run_id }}"
          if [ "${{ github.event.inputs.base_branch }}" = "$BR" ]; then
            echo "::error:: base_branch and working branch are the same."
            exit 1
          fi
          git checkout -b "$BR"

      - name: Apply patch if provided
        if: ${{ github.event.inputs.patch_b64 != '' }}
        run: |
          echo "${{ github.event.inputs.patch_b64 }}" | base64 -d > patch.diff
          if git apply --ignore-whitespace --check patch.diff; then
            git apply --ignore-whitespace patch.diff
          else
            echo "::warning:: patch.diff failed; writing diagnose file"
            echo "Patch apply failed at $(date -u +%FT%TZ)" >> .n8n-diagnose.txt
          fi

      - name: Create/Update hello.txt
        run: |
          printf "hello from GitHub Actions at %s\n" "$(date -u +%FT%TZ)" > hello.txt

      - name: Show workspace after create
        run: |
          ls -al
          git status --porcelain
          head -n 2 hello.txt || true

      - name: Stage & commit (force add)
        run: |
          git add -f hello.txt || true
          if [ -f ".n8n-diagnose.txt" ]; then git add -f .n8n-diagnose.txt; fi
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "SKIP_PR=true" >> $GITHUB_ENV
          else
            git commit -m "${{ github.event.inputs.pr_title }}"
            git show --name-status --oneline -n 1
          fi

      - name: Push branch
        if: env.SKIP_PR != 'true'
        run: |
          git push -u origin "auto/patch-${{ github.run_id }}"

      - name: Create Pull Request (REST, robust)
        if: env.SKIP_PR != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          OWNER: ${{ github.repository_owner }}
          HEAD: auto/patch-${{ github.run_id }}
          BASE: ${{ github.event.inputs.base_branch }}
          TITLE: ${{ github.event.inputs.pr_title }}
        run: |
          set -e
          BODY="Automated patch from workflow run ${{ github.run_id }}."
          JSON=$(printf '{"title":"%s","head":"%s","base":"%s","body":"%s"}' "$TITLE" "$HEAD" "$BASE" "$BODY")

          # 1) PR 생성 시도
          HTTP_CODE=$(curl -sS -o pr.json -w "%{http_code}" -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "$JSON" \
            "https://api.github.com/repos/$REPO/pulls")
          echo "HTTP_CODE=$HTTP_CODE"
          echo "---- create response ----"
          cat pr.json || true

          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
            PR_URL=$(python - << 'PY'
import json
print(json.load(open("pr.json")).get("html_url",""))
PY
)
            echo "✅ PR created: $PR_URL"
            exit 0
          fi

          # 2) 이미 PR 존재(422)인 경우: 기존 PR URL 조회
          if grep -qi "already exists" pr.json; then
            echo "ℹ️ PR already exists; searching open PR by head..."
            curl -sS -H "Authorization: Bearer $GH_TOKEN" \
              "https://api.github.com/repos/$REPO/pulls?head=$OWNER:$HEAD&state=open" > list.json
            echo "---- list response ----"
            cat list.json || true
            PR_URL=$(python - << 'PY'
import json,sys
lst=json.load(open("list.json"))
print(lst[0]["html_url"] if lst else "")
PY
)
            if [ -n "$PR_URL" ]; then
              echo "✅ Existing PR: $PR_URL"
              exit 0
            fi
          fi

          # 3) 커밋 차이 없음(422)일 때는 공지 후 통과
          if grep -qi "No commits between" pr.json; then
            echo "::notice:: No commits between $BASE and $HEAD; PR not needed."
            exit 0
          fi

          echo "::error:: PR creation failed


