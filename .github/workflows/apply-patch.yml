name: Apply Patch

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: "Base branch to patch"
        required: true
        default: "main"
      pr_title:
        description: "PR title"
        required: true
        default: "Auto patch from n8n"
      patch_b64:
        description: "Base64-encoded unified diff"
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  apply-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base_branch }}
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create feature branch
        run: |
          BR="auto/patch-${{ github.run_id }}"
          if [ "${{ github.event.inputs.base_branch }}" = "$BR" ]; then
            echo "::error:: base_branch equals feature branch"
            exit 1
          fi
          git checkout -b "$BR"
          echo "BRANCH=$BR" >> $GITHUB_ENV

      - name: Apply patch if provided
        if: ${{ github.event.inputs.patch_b64 != '' }}
        env:
          PATCH_B64: ${{ github.event.inputs.patch_b64 }}
        run: |
          python3 - <<'PY'
      import os, base64
      b = os.environ['PATCH_B64']
      open('patch.diff','wb').write(base64.b64decode(b))
      PY
          git apply -p0 --whitespace=nowarn patch.diff || git apply -p1 --whitespace=nowarn patch.diff

      - name: Create/Update hello.txt
        run: |
          printf "hello from GitHub Actions at %s\n" "$(date -u +%FT%TZ)" > hello.txt

      - name: Stage & commit
        run: |
          git add -f hello.txt || true
          if [ -f ".n8n-diagnose.txt" ]; then git add -f .n8n-diagnose.txt; fi
          if git diff --cached --quiet; then
            echo "SKIP_PR=true" >> $GITHUB_ENV
          else
            git commit -m "${{ github.event.inputs.pr_title }}"
          fi

      - name: Push branch
        if: env.SKIP_PR != 'true'
        run: |
          git push -u origin "$BRANCH"

      - name: Create Pull Request (REST, robust)
        if: env.SKIP_PR != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          OWNER: ${{ github.repository_owner }}
          HEAD: ${{ env.BRANCH }}
          BASE: ${{ github.event.inputs.base_branch }}
          TITLE: ${{ github.event.inputs.pr_title }}
        run: |
          set -e
          BODY="Automated patch from workflow run ${{ github.run_id }}."
          PAYLOAD=$(printf '{"title":"%s","head":"%s","base":"%s","body":"%s"}' "$TITLE" "$HEAD" "$BASE" "$BODY")

          CODE=$(curl -sS -o pr.json -w "%{http_code}" -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "$PAYLOAD" \
            "https://api.github.com/repos/$REPO/pulls")

          echo "HTTP_CODE=$CODE"
          cat pr.json || true

          if [ "$CODE" = "201" ] || [ "$CODE" = "200" ]; then
            python -c 'import json; print("PR_URL="+json.load(open("pr.json")).get("html_url",""))'
            exit 0
          fi

          if grep -qi "already exists" pr.json; then
            curl -sS -H "Authorization: Bearer $GH_TOKEN" \
              "https://api.github.com/repos/$REPO/pulls?head=$OWNER:$HEAD&state=open" > list.json
            python -c 'import json; lst=json.load(open("list.json")); print("EXISTING_PR_URL="+(lst[0]["html_url"] if lst else ""))'
            exit 0
          fi

          if grep -qi "No commits between" pr.json; then
            echo "::notice:: No commits between $BASE and $HEAD"
            exit 0
          fi

          echo "::error:: PR creation failed"
          exit 1

