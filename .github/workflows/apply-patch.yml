name: apply-and-pr

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: 'Base branch'
        required: true
        default: 'main'
      pr_title:
        description: 'PR title'
        required: true
        default: 'Auto patch from n8n'
      patch_b64:
        description: 'Base64-encoded patch (optional)'
        required: false
        default: ''

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_branch }}
          fetch-depth: 0

      - name: Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # ✅ 새 작업 브랜치 생성/스위치 (한 번만)
      - name: Create work branch
        id: mkbranch
        shell: bash
        run: |
          set -euo pipefail
          BR="auto/patch-${{ github.run_id }}"
          git fetch --all
          git switch -c "$BR" || git checkout -b "$BR"
          echo "branch=$BR" >> "$GITHUB_OUTPUT"

      # (옵션) n8n에서 넘어온 patch_b64 적용
      - name: Apply patch if provided (robust)
        id: apply
        env:
          PATCH_B64: ${{ inputs.patch_b64 }}   # ← 셸로 값 전달 (셸 내부에 ${{ }} 쓰지 않음)
        shell: bash
        run: |
          # set -u 제거 (unset 변수로 실패 방지)
          set -eo pipefail

          DID_APPLY="false"
          if [ -n "${PATCH_B64:-}" ]; then
            echo "[info] patch_b64 length: $(printf '%s' "$PATCH_B64" | wc -c)"

            # base64 디코드 (개행 제거 + CRLF 정규화)
            printf '%s' "$PATCH_B64" | tr -d '\r\n' | base64 -d > patch.diff 2> decode.err || true
            sed -i 's/\r$//' patch.diff || true

            echo "[preview top 20]"; head -n 20 patch.diff || true
            echo "[preview bottom 20]"; tail -n 20 patch.diff || true

            # git apply 시도 (-p0 → -p1)
            for P in 0 1; do
              if git apply --check --whitespace=nowarn -p${P} patch.diff 2> apply_check.err; then
                if git apply --index --whitespace=nowarn -p${P} patch.diff 2> apply.err; then
                  DID_APPLY="true"
                  echo "[info] git apply -p${P} succeeded"
                  break
                fi
              fi
            done

            # patch(1) 폴백
            if [ "$DID_APPLY" != "true" ] && command -v patch >/dev/null 2>&1; then
              for P in 0 1; do
                if patch -p${P} -f -s < patch.diff; then
                  git add -A
                  DID_APPLY="true"
                  echo "[info] patch -p${P} succeeded"
                  break
                fi
              done
            fi

            # 최종 실패: 진단 아티팩트 커밋
            if [ "$DID_APPLY" != "true" ]; then
              echo "::warning::Patch application failed. Committing patch.diff and debug logs."
              mkdir -p .n8n-debug || true
              [ -s decode.err ] && mv decode.err .n8n-debug/ || true
              [ -s apply_check.err ] && mv apply_check.err .n8n-debug/ || true
              [ -s apply.err ] && mv apply.err .n8n-debug/ || true
              git add patch.diff .n8n-debug || true
            fi
          fi

          echo "did_apply=$DID_APPLY" >> "$GITHUB_OUTPUT"


      # ✅ (이동) 패치 적용 직후, 필요한 파일이 실제 생겼는지 점검
      - name: Verify required files exist (only when patch applied)
        if: steps.apply.outputs.did_apply == 'true'
        shell: bash
        run: |
          set -euo pipefail
          req=(apps/lotto/lotto.py tests/test_lotto.py requirements.txt)
          for f in "${req[@]}"; do
            if ! test -f "$f"; then
              echo "::error ::Required file missing after apply: $f"
              exit 1
            fi
          done



      # ✅ 변경 0건이어도 PR이 생기도록 최소 1개 변경 보장
      - name: Ensure at least one change
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "run_id=${{ github.run_id }}"
            echo "run_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          } >> .n8n-diagnose.txt
          git add .n8n-diagnose.txt

      # ✅ 커밋 (누락됐던 fi 추가 완료)
      - name: Commit if changes exist
        id: commit
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --cached --quiet; then
            git commit -m "${{ inputs.pr_title }}"
            echo "did_commit=true" >> "$GITHUB_OUTPUT"
          else
            echo "No staged changes; skip commit."
            echo "did_commit=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Ensure git auth uses token
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"


      # ✅ 커밋된 경우에만 push
      - name: Push branch
        if: steps.commit.outputs.did_commit == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git push -u origin "${{ steps.mkbranch.outputs.branch }}"

      # ✅ 커밋된 경우에만 PR 생성
      - name: Create Pull Request
        if: steps.commit.outputs.did_commit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          gh pr create \
            --head "${{ steps.mkbranch.outputs.branch }}" \
            --base "${{ inputs.base_branch }}" \
            --title "${{ inputs.pr_title }}" \
            --body "Automated patch via workflow run ${{ github.run_id }}"


