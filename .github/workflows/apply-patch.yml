name: Apply patch from n8n

on:
  workflow_dispatch:
    inputs:
      patch_b64:
        description: Base64-encoded patch (git-diff or unified diff)
        required: true
      base_branch:
        description: Base branch to apply on
        required: true
        default: main
      pr_title:
        description: PR title
        required: false
        default: "Auto patch from n8n"

permissions:
  contents: write
  pull-requests: write

jobs:
  apply-and-test:
    runs-on: ubuntu-latest
    env:
      BRANCH: auto/patch-${{ github.run_id }}

    steps:
      - name: Checkout base branch (full)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base_branch }}
          fetch-depth: 0

      - name: Configure git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Decode patch (trim spaces/newlines → base64 decode → normalize LF)
        run: |
          set -e
          echo "${{ github.event.inputs.patch_b64 }}" | tr -d '\r\n ' | base64 -d > /tmp/patch.diff
          # 줄바꿈 정규화
          dos2unix /tmp/patch.diff || true
          echo "---- patch head ----"
          head -n 50 /tmp/patch.diff || true

      - name: Apply patch (git-diff면 git apply, 아니면 patch)
        run: |
          set -e
          PATCH=/tmp/patch.diff

          echo "---- sniff patch type ----"
          head -n 1 "$PATCH" || true

          if head -n1 "$PATCH" | grep -q '^diff --git '; then
            echo "Using: git apply (with whitespace tolerance)"
            git apply --reject --whitespace=fix "$PATCH" \
              || git apply --reject --ignore-whitespace "$PATCH"
          else
            echo "Using: patch -p0 (LF normalized)"
            patch -p0 -i "$PATCH" || {
              echo "patch failed; trying -p1 fallback"
              patch -p1 -i "$PATCH"
            }
          fi

          git add -A
          if git diff --cached --quiet; then
            echo "No changes staged; patch may have failed"; exit 1
          fi

          git commit -m "auto: apply patch from n8n (run ${{ github.run_id }})"

      - name: (Optional) Run tests
        run: |
          if [ -x ./run_tests.sh ]; then
            bash ./run_tests.sh
          elif [ -f package.json ]; then
            npm ci && npm test --silent
          elif ls -1 *test*.py tests 2>/dev/null; then
            python -m pip install --upgrade pip pytest && pytest -q --maxfail=1 --disable-warnings
          else
            echo "No tests found"; exit 0
          fi

      - name: Push branch
        run: |
          git switch -c "${{ env.BRANCH }}" || git checkout "${{ env.BRANCH }}"
          git push --set-upstream origin "${{ env.BRANCH }}"

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ env.BRANCH }}
          base: ${{ github.event.inputs.base_branch }}
          title: ${{ github.event.inputs.pr_title }}
          body: |
            Patch applied by n8n.  
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          labels: auto-patch,n8n

      - name: Show last commits & touched files (for quick check)
        run: |
          echo "---- last commits ----"
          git log -n 3 --oneline
          echo "---- changed files in this commit ----"
          git show --name-status --oneline HEAD
