diff --git a/src/app.js b/src/app.js
new file mode 100644
--- /dev/null
+++ b/src/app.js
@@ -0,0 +1,40 @@
+const express = require('express');
+const app = express();
+
+app.use(express.json());
+
+// Generic API error handler
+const handleApiError = (error, operation) => {
+  console.error(`API Error during ${operation}:`, {
+    message: error.message,
+    stack: error.stack,
+    timestamp: new Date().toISOString()
+  });
+};
+
+// Mock external data fetcher (replace with real integration if needed)
+async function fetchExternalData() {
+  // Simulate async workload; replace with real fetch/DB call
+  return {
+    items: [
+      { id: 1, value: 'alpha' },
+      { id: 2, value: 'beta' },
+      { id: 3, value: 'gamma' }
+    ],
+    fetchedAt: new Date().toISOString()
+  };
+}
+
+// Example API endpoint with error handling
+app.get('/api/data', async (req, res) => {
+  try {
+    const data = await fetchExternalData();
+    res.json(data);
+  } catch (error) {
+    handleApiError(error, 'fetchExternalData');
+    res.status(500).json({ error: 'Internal server error' });
+  }
+});
+
+// Export app for server or tests
+module.exports = app;
diff --git a/src/server.js b/src/server.js
new file mode 100644
--- /dev/null
+++ b/src/server.js
@@ -0,0 +1,14 @@
+const http = require('http');
+const app = require('./app');
+
+const PORT = process.env.PORT || 3000;
+
+const server = http.createServer(app);
+
+server.listen(PORT, () => {
+  console.log(`[server] Listening on port ${PORT}`);
+});
+
+// Graceful shutdown
+process.on('SIGTERM', () => server.close(() => process.exit(0)));
+process.on('SIGINT', () => server.close(() => process.exit(0)));
diff --git a/package.json b/package.json
new file mode 100644
--- /dev/null
+++ b/package.json
@@ -0,0 +1,13 @@
+{
+  "name": "my-app",
+  "version": "1.0.0",
+  "private": true,
+  "type": "commonjs",
+  "main": "src/server.js",
+  "scripts": {
+    "start": "node src/server.js"
+  },
+  "dependencies": {
+    "express": "^4.19.2"
+  }
+}
